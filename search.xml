<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>gomoku</title>
      <link href="/2019/07/31/gomoku/"/>
      <url>/2019/07/31/gomoku/</url>
      
        <content type="html"><![CDATA[<h1 id="VUE-手把手教你开发一个人机五子棋-1"><a href="#VUE-手把手教你开发一个人机五子棋-1" class="headerlink" title="VUE 手把手教你开发一个人机五子棋(1)"></a>VUE 手把手教你开发一个人机五子棋(1)</h1><blockquote><p>任何能够用 JavaScript 实现的应用系统，最终都必将用 JavaScript 实现。 – Jeff Atwood</p></blockquote><a id="more"></a><p>之前就一直想做一个不太复杂的例子，实现桌面的(ELECTRON)、ANDROID 以及 IOS 等多端应用。</p><p>五子棋这样一个项目感觉代码量不多，也能涉及到不少基础的语法。就用这个五子棋项目，来尽可能的实现一处开发，多端应用吧</p><h2 id="1-项目环境搭建"><a href="#1-项目环境搭建" class="headerlink" title="1. 项目环境搭建"></a>1. 项目环境搭建</h2><p>使用目前最新的 VUE-CLI 3.2.1 建立项目,勾选 <code>VUEX VUE-ROUTER</code></p><p>根据个人习惯配置相应选项</p><p>我个人使用的有 <code>eslint lint-staged less</code></p><p>推荐安装 <code>version</code> ,用作打包版本处理工具</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i version --save-dev</span><br></pre></td></tr></table></figure><p>在<code>package.json</code>的<code>scripts</code>里,写入:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">"patch": "npm version patch &amp;&amp; git push origin &amp;&amp; git push origin --tags",</span><br><span class="line">"minor": "npm version minor &amp;&amp; git push origin &amp;&amp; git push origin --tags",</span><br><span class="line">"major": "npm version major &amp;&amp; git push origin &amp;&amp; git push origin --tags"</span><br></pre></td></tr></table></figure><p>现在,分别使用 <code>npm run patch/minor/major</code> 即可发布小\次\主版本号并在 GITHUB 创建相应 TAG</p><h2 id="2-界面基础开发"><a href="#2-界面基础开发" class="headerlink" title="2.界面基础开发"></a>2.界面基础开发</h2><p>主题的布局只是一个棋盘,为了更好的适应多终端需求,我们选择了 FLEX 布局<br>原生默认的 FLEX 属性相对比较难记,这里使用<a href="https://github.com/lzxb/flex.css" target="_blank" rel="noopener">flex.css</a>这个插件<br>只用一些简单的 CSS 选择器,实现了 FLEX 的多数功能,可以自行查阅相应文档</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i flex.css --save</span><br></pre></td></tr></table></figure><p>然后在 main.js 里面引入即可使用了</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">"flex.css"</span>;</span><br></pre></td></tr></table></figure><h3 id="1-路由"><a href="#1-路由" class="headerlink" title="1.路由"></a>1.路由</h3><p>我们需要两个路由页面<br>一个用于欢迎页,显示诸如<code>开始游戏</code>(以及以后可能的联机游戏,难度调整等)这样的一个菜单页面<br>第二个用于我们程序的主体页面<br>所以我们的 router.js 文件如下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">"vue"</span>;</span><br><span class="line"><span class="keyword">import</span> Router <span class="keyword">from</span> <span class="string">"vue-router"</span>;</span><br><span class="line"></span><br><span class="line">Vue.use(Router);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Router(&#123;</span><br><span class="line">  routes: [</span><br><span class="line">    &#123;</span><br><span class="line">      path: <span class="string">"/"</span>,</span><br><span class="line">      name: <span class="string">"Welcome"</span>,</span><br><span class="line">      component: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">"@/views/Welcome"</span>),</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      path: <span class="string">"/ChessBoard"</span>,</span><br><span class="line">      name: <span class="string">"ChessBoard"</span>,</span><br><span class="line">      component: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">"@/views/ChessBoard"</span>),</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="2-欢迎页面"><a href="#2-欢迎页面" class="headerlink" title="2.欢迎页面"></a>2.欢迎页面</h3><p>欢迎页面很简单,可根据自己喜好设计样式,功能上只需要提供几个路由链接即可<br>这里使用了 flex.css 插件的写法<br>比如<code>flex=&quot;dir:top box:first cross:center main:center&quot;</code><br>简单说来,dir 表示方向,box 表示元素空间分配方式,main 表示主轴对齐方式,cross 表示交叉轴对齐方式</p><p>同时,为了以后参数的修改方便,我们将大部分颜色\宽高这样的代码提取到一个公共 LESS 文件下,再将其注入到每一个 LESS 文件里以便引用(可参考<a href="https://anyclub.github.io/2018/11/21/vue-cli/#more">上一篇</a>文章中的 <strong>注入 CSS 预处理器的全局变量</strong>)</p><p>最后一点关于 LESS 的说明,就是<code>~</code>符号,让 LESS 按照原样输出,这样我们就可以使用 VUE 配置好的路径别名了</p><p>文末附详细代码</p><h3 id="3-程序主页面"><a href="#3-程序主页面" class="headerlink" title="3.程序主页面"></a>3.程序主页面</h3><p>先开发桌面(PC)端,采用左右结构布局,左侧为棋盘,右侧为相应的控制按钮以及显示信息,分为两个 VUE 组件<code>ChessBox</code>以及<code>SideBar</code></p><p>先说 ChessBox 组件,作为桌面端,我们都是宽度大于高度,所以直接使用 80vh 作为棋盘宽高, 然后我们只需要画一个 15*15 的方格即可,在方格上,我们使用 CELL 来描绘棋盘,使用 CHESS 来描绘棋子<br>代码如下:</p><p>棋盘布局代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">flex</span>=<span class="string">"box:mean"</span> <span class="attr">v-for</span>=<span class="string">"row in 15"</span> <span class="attr">:key</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span></span></span><br><span class="line"><span class="tag">    <span class="attr">class</span>=<span class="string">"cell"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">v-for</span>=<span class="string">"column in 15"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:class</span>=<span class="string">"computedClass(row, column)"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:key</span>=<span class="string">"column"</span></span></span><br><span class="line"><span class="tag">  &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"chess"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>里面引入了一个 computedClass 方法,用于计算该格 CALSS 的样式名称,方便对边框上的背景给指定样式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">computedClass (row, column) &#123;</span><br><span class="line">  <span class="keyword">let</span> className = <span class="string">''</span></span><br><span class="line">  <span class="keyword">if</span> (row === <span class="number">1</span>) &#123;</span><br><span class="line">    className += <span class="string">'top '</span></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (row === <span class="keyword">this</span>.rows) &#123;</span><br><span class="line">    className += <span class="string">'bottom '</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (column === <span class="number">1</span>) &#123;</span><br><span class="line">    className += <span class="string">'left'</span></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (column === <span class="keyword">this</span>.columns) &#123;</span><br><span class="line">    className += <span class="string">'right'</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> className</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后根据具体的 CLASS 名称添加相应的背景图即可</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.cell</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="variable">@cell-bg</span> center center no-repeat;</span><br><span class="line"></span><br><span class="line">  <span class="selector-tag">&amp;</span><span class="selector-class">.left</span> &#123;</span><br><span class="line">    <span class="attribute">background-image</span>: <span class="variable">@cell-bg-l</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-tag">&amp;</span><span class="selector-class">.right</span> &#123;</span><br><span class="line">    <span class="attribute">background-image</span>: <span class="variable">@cell-bg-r</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-tag">&amp;</span><span class="selector-class">.top</span> &#123;</span><br><span class="line">    <span class="attribute">background-image</span>: <span class="variable">@cell-bg-t</span>;</span><br><span class="line"></span><br><span class="line">    <span class="selector-tag">&amp;</span><span class="selector-class">.left</span> &#123;</span><br><span class="line">      <span class="attribute">background-image</span>: <span class="variable">@cell-bg-tl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-tag">&amp;</span><span class="selector-class">.right</span> &#123;</span><br><span class="line">      <span class="attribute">background-image</span>: <span class="variable">@cell-bg-tr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-tag">&amp;</span><span class="selector-class">.bottom</span> &#123;</span><br><span class="line">    <span class="attribute">background-image</span>: <span class="variable">@cell-bg-b</span>;</span><br><span class="line"></span><br><span class="line">    <span class="selector-tag">&amp;</span><span class="selector-class">.left</span> &#123;</span><br><span class="line">      <span class="attribute">background-image</span>: <span class="variable">@cell-bg-bl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-tag">&amp;</span><span class="selector-class">.right</span> &#123;</span><br><span class="line">      <span class="attribute">background-image</span>: <span class="variable">@cell-bg-br</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-右侧菜单栏"><a href="#4-右侧菜单栏" class="headerlink" title="4.右侧菜单栏"></a>4.右侧菜单栏</h3><p>我们在棋盘右侧显示信息窗口以及控制按钮,同欢迎界面一样,功能和样式都很简单<br>界面上需要显示双方玩家名称,执黑还是执白,使用时间等基础信息<br>按钮上需要有:投降\悔棋\重新开始等按钮</p><h3 id="5-结束"><a href="#5-结束" class="headerlink" title="5.结束"></a>5.结束</h3><p>现在,我们已经完成本项目的整体布局部分了,大致界面如下<br><img src="/2019/07/31/gomoku/gomoku.jpg" alt="棋盘界面"></p><p>下面附上代码链接</p><p><a href="https://github.com/anyclub/gomoku-vue/archive/v0.1.1.zip" target="_blank" rel="noopener">布局完成后的代码部分</a></p><h3 id="6-补"><a href="#6-补" class="headerlink" title="6.补"></a>6.补</h3><p>上面的代码里,有 2 个小问题</p><ol><li>在 <code>ChessBox.vue</code> 里面,把</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">row in 15</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">column in 15</span><br></pre></td></tr></table></figure><p>分别替换成</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">row in rows</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">column in columns</span><br></pre></td></tr></table></figure><ol start="2"><li>在<code>SideBar.vue</code>里面,给<code>.chess</code>删除 CSS 属性</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">margin-right</span>: 5<span class="selector-tag">px</span>;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>vue-cli3.0 使用小结</title>
      <link href="/2018/11/21/vue-cli/"/>
      <url>/2018/11/21/vue-cli/</url>
      
        <content type="html"><![CDATA[<h1 id="vue-cli-3-0-使用小结"><a href="#vue-cli-3-0-使用小结" class="headerlink" title="vue-cli 3.0 使用小结"></a>vue-cli 3.0 使用小结</h1><p>个人使用 VUE-CLI 3.0 碰到一些问题,用作记录</p><p>VUE-CLI 3.0 开始,配置文件改动较大,多数配置文件均在项目目录下,<code>vue.config.js</code>文件内配置:</p><a id="more"></a><h2 id="路径别名"><a href="#路径别名" class="headerlink" title="路径别名"></a>路径别名</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">"path"</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">resolve</span>(<span class="params">dir</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> path.join(__dirname, dir);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  chainWebpack: <span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">    config.resolve.alias</span><br><span class="line">      .set(<span class="string">"@img"</span>, resolve(<span class="string">"src/assets/img"</span>))</span><br><span class="line">      .set(<span class="string">"@g"</span>, resolve(<span class="string">"src/global"</span>))</span><br><span class="line">      .set(<span class="string">"@c"</span>, resolve(<span class="string">"src/components"</span>))</span><br><span class="line">      .set(<span class="string">"@m"</span>, resolve(<span class="string">"src/mixins"</span>))</span><br><span class="line">      .set(<span class="string">"@v"</span>, resolve(<span class="string">"src/views"</span>))</span><br><span class="line">      .set(<span class="string">"@s"</span>, resolve(<span class="string">"src/store"</span>));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>别名<code>@</code>为 VUE 自带默认配置(指向<code>src</code>),无需配置</p></blockquote><h2 id="开启-CSS-预处理器的-JAVASCRIPT"><a href="#开启-CSS-预处理器的-JAVASCRIPT" class="headerlink" title="开启 CSS 预处理器的 JAVASCRIPT"></a>开启 CSS 预处理器的 JAVASCRIPT</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  css: &#123;</span><br><span class="line">    loaderOptions: &#123;</span><br><span class="line">      less: &#123;</span><br><span class="line">        javascriptEnabled: <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="注入-CSS-预处理器的全局变量"><a href="#注入-CSS-预处理器的全局变量" class="headerlink" title="注入 CSS 预处理器的全局变量"></a>注入 CSS 预处理器的全局变量</h2><p>首先在项目安装<code>style-resources-loader</code>,命令:<code>vue add style-resources-loader</code><br>然后在<code>vue.config.js</code>文件下修改相应路径</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  pluginOptions: &#123;</span><br><span class="line">    <span class="string">"style-resources-loader"</span>: &#123;</span><br><span class="line">      preProcessor: <span class="string">"less"</span>,</span><br><span class="line">      patterns: [path.resolve(__dirname, <span class="string">"./src/....../base.less"</span>)]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="热更新问题"><a href="#热更新问题" class="headerlink" title="热更新问题"></a>热更新问题</h2><p>使用 NPM(或 yarn) 重装依赖<br>多次使用 CNPM 安装后,控制台无任何报错,其他运行都正常,但无法自动刷新页面</p><h2 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h2><p>在项目根目录下,使用文件<code>.env.mode名称</code>,文件内即可配置相应环境变量</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.env                # 在所有的环境中被载入</span><br><span class="line">.env.local          # 在所有的环境中被载入，但会被 git 忽略</span><br><span class="line">.env.[mode]         # 只在指定的模式中被载入</span><br><span class="line">.env.[mode].local   # 只在指定的模式中被载入，但会被 git 忽略</span><br></pre></td></tr></table></figure><p>然后在文件内写入:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">NODE_ENV = &apos;production&apos;</span><br><span class="line">VUE_APP_MODEL = &apos;prod&apos;</span><br></pre></td></tr></table></figure><p>只有以 <code>VUE_APP_</code> 开头的变量会被 webpack.DefinePlugin 静态嵌入到客户端侧的包中。你可以在应用的代码中这样访问它们：<code>console.log(process.env.VUE_APP_MODEL)</code></p><p>运行或者打包 VUE 项目时,使用<code>--mode mode名称</code>切换环境</p>]]></content>
      
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> vue-cli </tag>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
